#pragma kernel Update

#define TO_HOME 1
#define TO_FOOD 0
#define DEAD 2

struct Ant
{
    float2 position;
    float angle;
    int state;
    int hits;
    float lifetime;
    float liberty_coef;
    float markerTime;
    float marker;
    int hasFood;
};

RWStructuredBuffer<Ant> ants;
uint numAnts;

RWTexture2D<float4> TrailMap;
RWTexture2D<float4> FoodMap;

Texture2D WallMap;
int width;
int height;

float trailWeight;
float moveSpeed;

float directionNoise;
float maxLifetime;

// float sensorAngleDegrees;
// float sensorOffsetDst;
// int sensorSize;

float nestTrailWeight;
float foodTrailWeight;
float deathTrailWeight;

float4 nestTrailColor;
float4 foodTrailColor;
float4 deathTrailColor;
float4 antColor;
float4 foodColor;
float4 wallColor;

float sampleMaxDistance;
float sampleAngleRange;
int sampleCount;

int2 colonyLocation;
float colonySize;


float deltaTime;
float time;
float seed;
float deathRadius;
int respawnAnt;

float getAngle(float2 v)
{
    const float a = acos(v.x / length(v));
    return v.y > 0.0f ? a : -a;
}


// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


// float sense(Ant ant, float sensorAngleOffset)
// {
//     float sensorAngle = ant.angle + sensorAngleOffset;
//     float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));
//
//     float2 sensorPos = ant.position + sensorDir * sensorOffsetDst;
//     int sensorCentreX = (int)sensorPos.x;
//     int sensorCentreY = (int)sensorPos.y;
//
//     float sum = 0;
//
//     float3 senseMask = float3(ant.state == 1, ant.state == 0, 1);
//
//     float3 senseWeight = float3(nestTrailWeight, foodTrailWeight, deathTrailWeight);
//
//     for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX ++)
//     {
//         for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY ++)
//         {
//             int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
//             int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));
//
//             float3 map = TrailMap[int2(sampleX, sampleY)].xyz;
//             if (distance(float2(sampleX, sampleY), float2(1920 / 2 - 400, 1080 / 2 - 400)) < 40)
//             {
//                 map.y = 10;
//             }
//             if (distance(float2(sampleX, sampleY), float2(1920 / 2, 1080 / 2)) < 100)
//             {
//                 map.x = 10;
//             }
//
//             sum += dot(senseWeight * senseMask, map);
//         }
//     }
//
//     if (sum < 0.1)
//         sum = 0;
//
//     return sum;
// }


bool checkCoords(float2 cell)
{
    return cell.x >= 0 && cell.x < width && cell.y >= 0 && cell.y < height;
}

struct HitPoint
{
    float2 cell;
    float2 normal;
    float distance;
};


void terminate(int antIndex)
{
    ants[antIndex].lifetime = maxLifetime + 1.0f;
}

bool getFirstHit(float2 p, float2 d, float max_dist, out HitPoint intersection)
{
    int2 cell_p = int2(p.x, p.y);
    const float2 step = float2(d.x < 0.0f ? -1 : 1, d.y < 0.0f ? -1 : 1);
    const float2 inv_d = float2(1.0f / d.x, 1.0f / d.y);
    const float t_dx = abs(inv_d.x);
    const float t_dy = abs(inv_d.y);
    float t_max_x = (cell_p.x + (step.x > 0) - p.x) * inv_d.x;
    float t_max_y = (cell_p.y + (step.y > 0) - p.y) * inv_d.y;
    float dist = 0.0f;
    while (dist < max_dist)
    {
        const uint b = t_max_x < t_max_y;
        // Advance in grid
        dist = (b * t_max_x + (!b) * t_max_y);
        t_max_x += t_dx * b;
        t_max_y += t_dy * (!b);
        cell_p.x += step.x * b;
        cell_p.y += step.y * (!b);
        if (!checkCoords(cell_p))
        {
            return false;
        }
        if (WallMap[cell_p].r)
        {
            intersection.cell = cell_p;
            intersection.normal = float2(b, !b);
            intersection.distance = dist;
            return true;
        }
    }
    return false;
}

void updatePosition(int antIndex)
{
    float2 direction = float2(cos(ants[antIndex].angle), sin(ants[antIndex].angle));
    HitPoint hit;
    if (getFirstHit(ants[antIndex].position, direction, deltaTime * moveSpeed, hit))
    {
        const int hits_threshold = 4;
        if (ants[antIndex].hits > hits_threshold)
        {
            terminate(antIndex);
        }
        else
        {
            direction.x *= hit.normal.x != 0.0f ? -1.0f : 1.0f;
            direction.y *= hit.normal.y != 0.0f ? -1.0f : 1.0f;
        }
        ants[antIndex].hits++;
        ants[antIndex].angle = getAngle(direction);
    }
    else
    {
        ants[antIndex].hits = 0;
        ants[antIndex].position += moveSpeed * deltaTime * direction;
        if (!checkCoords(ants[antIndex].position))
        {
            terminate(antIndex);
        }
    }
}

bool isNest(int2 cell)
{
    if (distance(cell, colonyLocation) < colonySize)
    {
        return true;
    }
    return false;
}


float findMarker(int antIndex, float random)
{
    float max_intensity = -1;
    float max_angle = ants[antIndex].angle;
    float3 senseMask = float3(ants[antIndex].state == 1, ants[antIndex].state == 0, 1);

    float3 senseWeight = float3(nestTrailWeight, foodTrailWeight, deathTrailWeight);

    for (int i = 0; i < sampleCount; i++)
    {
        random = hash(random);
        float delta_angle = scaleToRange01(random) - 0.5f;
        float sample_angle = delta_angle + ants[antIndex].angle;
        random = hash(random);
        float distance = scaleToRange01(random) * sampleMaxDistance;

        float2 to_marker = float2(cos(sample_angle), sin(sample_angle));
        int2 marker = int2(ants[antIndex].position + to_marker * distance);
       
        HitPoint hit_point;
        if (!checkCoords(marker) || getFirstHit(ants[antIndex].position, to_marker, distance, hit_point))
        {
            continue;
        }
        if ((ants[antIndex].state == TO_HOME && isNest(marker)) || (ants[antIndex].state == TO_FOOD && FoodMap[marker].r > 0))
        {
            max_angle = sample_angle;
            break;
        }

        float3 map = TrailMap[marker].xyz;
        float intensity = dot(senseWeight * senseMask, map);
        if(intensity >= max_intensity)
        {
            max_intensity = intensity;
            max_angle = sample_angle;
        }
        random = hash(random);

        if(scaleToRange01(random) < ants[antIndex].liberty_coef)
        {
            break;
        }
        
    }

    ants[antIndex].angle = max_angle;
    return max_intensity;
}


[numthreads(16,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numAnts)
    {
        return;
    }

    if(ants[id.x].lifetime > maxLifetime)
    {
        if(distance(ants[id.x].position,colonyLocation) > colonySize)
        {
            for(int x = -deathRadius; x < deathRadius; x++)
            {
                for(int y= -deathRadius; y< deathRadius; y++)
                {
                    TrailMap[ants[id.x].position + int2(x,y)] = TrailMap[ants[id.x].position+ int2(x,y)] + float4(0,0,max(1-distance(int2(x,y),int2(0,0))/deathRadius,0),0);
                }
            }
        }
        
        ants[id.x].position = colonyLocation;
        if(FoodMap[colonyLocation].g > 0 && id.x == respawnAnt)
        {
            FoodMap[colonyLocation] = FoodMap[colonyLocation] -= float4(0,0.01,0,0);
            ants[id.x].lifetime = 0;
        }
        else
            return;
    }
    ants[id.x].lifetime += deltaTime;
    updatePosition(id.x);

    Ant ant = ants[id.x];
    float2 pos = ant.position;

    uint random = hash(pos.y * width + pos.x + hash(id.x + seed * 100000));

    ants[id.x].marker-=deltaTime;
    
    //if(ants[id.x].marker < 0)
    //{
        float randomAngle = scaleToRange01(random);
        random = hash(random);
        float intensity = findMarker(id.x,random);
        float jitterAmount = (clamp(1 - intensity, 0, 1) + 0.5) * directionNoise;
        ants[id.x].angle += (randomAngle - 0.5) * 2 * jitterAmount * 2 * 3.1415 * deltaTime;
        //ants[id.x].marker = ants[id.x].markerTime;
    //}
    
    if(checkCoords(ant.position))
    {
        const int2 coord = int2(ants[id.x].position);
        const float4 oldTrail = TrailMap[coord];
        TrailMap[coord] = min(1, oldTrail + float4(ant.state == 0, ant.state == 1, 0, 0) * trailWeight * deltaTime);
    }

    if (ant.state == TO_FOOD && FoodMap[int2(ant.position)].r > 0)
    {
        FoodMap[int2(ant.position)] = FoodMap[int2(ant.position)] - float4(0.01,0,0,0);
        ants[id.x].state = TO_HOME;
        ants[id.x].lifetime = 0;
        ants[id.x].hasFood = 1;
    }

    if (ant.state == TO_HOME && isNest(int2(ant.position)))
    {
        if(ants[id.x].hasFood)
        {
            FoodMap[colonyLocation] = FoodMap[colonyLocation] + float4(0,0.01,0,0);
            ants[id.x].hasFood = 0;
        }
        ants[id.x].state = TO_FOOD;
        ants[id.x].lifetime = 0;
    }
    
    
    
}

#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    float4 sum = 0;
    float4 originalCol = TrailMap[id.xy];
    // 3x3 blur
    for (int offsetX = -1; offsetX <= 1; offsetX ++)
    {
        for (int offsetY = -1; offsetY <= 1; offsetY ++)
        {
            int sampleX = min(width - 1, max(0, id.x + offsetX));
            int sampleY = min(height - 1, max(0, id.y + offsetY));
            sum += TrailMap[int2(sampleX, sampleY)];
        }
    }

    float4 blurredCol = sum / 9;
    float diffuseWeight = saturate(diffuseRate * deltaTime);
    blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

    //DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
    DiffusedTrailMap[id.xy] = max(0, blurredCol - float4(decayRate, decayRate, decayRate * 0.001, decayRate) * deltaTime);
}

#pragma kernel UpdateColourMap
RWTexture2D<float4> ColourMap;

[numthreads(8,8,1)]
void UpdateColourMap(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    float4 trail = TrailMap[id.xy];
    float4 food = FoodMap[id.xy];
    float4 wall = WallMap[id.xy];

    float4 colour = float4(0, 0, 0, 0);
    colour += trail.r * nestTrailColor;
    colour += trail.g * foodTrailColor;
    colour += trail.b * deathTrailColor;
    colour += food.r * foodColor;
    colour += wall.r * wallColor;

    
    if (isNest(id.xy))
    {
        colour = float4(1, 0, 1, 1);
    }

    // for (uint i = 0; i < numSpecies; i ++)
    // {
    //     float4 mask = float4(i == 0, i == 1, i == 2, i == 3);
    //     colour += speciesSettings[i].colour * dot(map, mask);
    // }
    ColourMap[id.xy] = colour;
}
