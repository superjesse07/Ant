#pragma kernel Update

struct Ant
{
    float2 position;
    float angle;
    int state;
};

RWStructuredBuffer<Ant> ants;
uint numAnts;

RWTexture2D<float4> TrailMap;
int width;
int height;

float trailWeight;
float moveSpeed;
float turnSpeed;
float jitterSpeed;

float sensorAngleDegrees;
float sensorOffsetDst;
int sensorSize;

float nestTrailWeight;
float foodTrailWeight;
float deathTrailWeight;

float4 nestTrailColor;
float4 foodTrailColor;
float4 deathTrailColor;
float4 antColor;
float4 foodColor;
float4 wallColor;


float deltaTime;
float time;
float seed;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


float sense(Ant ant, float sensorAngleOffset)
{
    float sensorAngle = ant.angle + sensorAngleOffset;
    float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

    float2 sensorPos = ant.position + sensorDir * sensorOffsetDst;
    int sensorCentreX = (int)sensorPos.x;
    int sensorCentreY = (int)sensorPos.y;

    float sum = 0;

    float3 senseMask = float3(ant.state == 1, ant.state == 0, 1);

    float3 senseWeight = float3(nestTrailWeight, foodTrailWeight, deathTrailWeight);

    for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX ++)
    {
        for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY ++)
        {
            int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
            int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));

            float3 map = TrailMap[int2(sampleX, sampleY)].xyz;
            if (distance(float2(sampleX, sampleY), float2(1920 / 2 - 400, 1080 / 2 - 400)) < 40)
            {
                map.y = 10;
            }
            if (distance(float2(sampleX, sampleY), float2(1920 / 2, 1080 / 2)) < 100)
            {
                map.x = 10;
            }

            sum += dot(senseWeight * senseMask, map);
        }
    }

    if (sum < 0.1)
        sum = 0;

    return sum;
}

[numthreads(16,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numAnts)
    {
        return;
    }


    Ant ant = ants[id.x];
    float2 pos = ant.position;

    uint random = hash(pos.y * width + pos.x + hash(id.x + seed * 100000));

    // Steer based on sensory data
    float sensorAngleRad = sensorAngleDegrees * (3.1415 / 180);
    float weightLeft = sense(ant, sensorAngleRad);
    float weightRight = sense(ant, -sensorAngleRad);


    float randomSteerStrength = scaleToRange01(random);
    float _turnSpeed = turnSpeed * 2 * 3.1415;
    float leftRight = weightLeft - weightRight;

    if (leftRight > 0)
    {
        ants[id.x].angle += randomSteerStrength * _turnSpeed * deltaTime;
    }
    else if (leftRight < 0)
    {
        ants[id.x].angle -= randomSteerStrength * _turnSpeed * deltaTime;
    }

    random = hash(random);
    float jitterAmount = (clamp(1 - sense(ant, 0), 0, 1) + 0.5) * jitterSpeed;
    ants[id.x].angle += (scaleToRange01(random) - 0.5) * 2 * jitterAmount * 2 * 3.1415 * deltaTime;

    // Update position
    float2 direction = float2(cos(ant.angle), sin(ant.angle));
    float2 newPos = ant.position + direction * deltaTime * moveSpeed;

    if (distance(newPos, float2(1920 / 2 - 400, 1080 / 2 - 400)) < 40)
    {
        ants[id.x].state = 1;
    }
    if (distance(newPos, float2(1920 / 2, 1080 / 2)) < 100)
    {
        ants[id.x].state = 0;
    }


    // Clamp position to map boundaries, and pick new random move dir if hit boundary
    if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height)
    {
        random = hash(random);
        float randomAngle = scaleToRange01(random) * 2 - 1;

        newPos.x = min(width - 1, max(0, newPos.x));
        newPos.y = min(height - 1, max(0, newPos.y));
        ants[id.x].angle = ants[id.x].angle + 3.1415 + randomAngle;
    }
    else
    {
        int2 coord = int2(newPos);
        float4 oldTrail = TrailMap[coord];
        TrailMap[coord] = min(1, oldTrail + float4(ant.state == 0, ant.state == 1, 0, 0) * trailWeight * deltaTime);
    }

    ants[id.x].position = newPos;
}

#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    float4 sum = 0;
    float4 originalCol = TrailMap[id.xy];
    // 3x3 blur
    for (int offsetX = -1; offsetX <= 1; offsetX ++)
    {
        for (int offsetY = -1; offsetY <= 1; offsetY ++)
        {
            int sampleX = min(width - 1, max(0, id.x + offsetX));
            int sampleY = min(height - 1, max(0, id.y + offsetY));
            sum += TrailMap[int2(sampleX, sampleY)];
        }
    }

    float4 blurredCol = sum / 9;
    float diffuseWeight = saturate(diffuseRate * deltaTime);
    blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

    //DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
    DiffusedTrailMap[id.xy] = max(0, blurredCol - float4(decayRate, decayRate * 0.1, decayRate, decayRate) * deltaTime);
}

#pragma kernel UpdateColourMap
RWTexture2D<float4> ColourMap;

[numthreads(8,8,1)]
void UpdateColourMap(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    float4 map = TrailMap[id.xy];

    float4 colour = map.rbga;

    if (distance(id.xy, float2(1920 / 2 - 400, 1080 / 2 - 400)) < 40)
    {
        colour = float4(1, 1, 1, 1);
    }
    if (distance(id.xy, float2(1920 / 2, 1080 / 2)) < 100)
    {
        colour = float4(1, 0, 1, 1);
    }

    // for (uint i = 0; i < numSpecies; i ++)
    // {
    //     float4 mask = float4(i == 0, i == 1, i == 2, i == 3);
    //     colour += speciesSettings[i].colour * dot(map, mask);
    // }
    ColourMap[id.xy] = colour;
}
